// Generated by gencpp from file test_pub_sub_protobuf/Chatter.msg
// DO NOT EDIT!


#ifndef TEST_PUB_SUB_PROTOBUF_MESSAGE_CHATTER_H
#define TEST_PUB_SUB_PROTOBUF_MESSAGE_CHATTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test_pub_sub_protobuf
{
template <class ContainerAllocator>
struct Chatter_
{
  typedef Chatter_<ContainerAllocator> Type;

  Chatter_()
    : message()
    , count(0)  {
    }
  Chatter_(const ContainerAllocator& _alloc)
    : message(_alloc)
    , count(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef int32_t _count_type;
  _count_type count;





  typedef boost::shared_ptr< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> const> ConstPtr;

}; // struct Chatter_

typedef ::test_pub_sub_protobuf::Chatter_<std::allocator<void> > Chatter;

typedef boost::shared_ptr< ::test_pub_sub_protobuf::Chatter > ChatterPtr;
typedef boost::shared_ptr< ::test_pub_sub_protobuf::Chatter const> ChatterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test_pub_sub_protobuf::Chatter_<ContainerAllocator1> & lhs, const ::test_pub_sub_protobuf::Chatter_<ContainerAllocator2> & rhs)
{
  return lhs.message == rhs.message &&
    lhs.count == rhs.count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test_pub_sub_protobuf::Chatter_<ContainerAllocator1> & lhs, const ::test_pub_sub_protobuf::Chatter_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test_pub_sub_protobuf

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36d943046b5f520e12ac758c9f6277d7";
  }

  static const char* value(const ::test_pub_sub_protobuf::Chatter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36d943046b5f520eULL;
  static const uint64_t static_value2 = 0x12ac758c9f6277d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_pub_sub_protobuf/Chatter";
  }

  static const char* value(const ::test_pub_sub_protobuf::Chatter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string message\n"
"int32 count\n"
;
  }

  static const char* value(const ::test_pub_sub_protobuf::Chatter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message);
      stream.next(m.count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Chatter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_pub_sub_protobuf::Chatter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_pub_sub_protobuf::Chatter_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_PUB_SUB_PROTOBUF_MESSAGE_CHATTER_H
